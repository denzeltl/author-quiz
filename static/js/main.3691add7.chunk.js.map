{"version":3,"sources":["AuthorQuiz.js","AddAuthorForm.js","serviceWorker.js","index.js"],"names":["Hero","className","Book","title","onClick","Turn","author","books","highlight","onAnswerSelected","style","backgroundColor","none","correct","wrong","highlightToBgColor","src","imageUrl","alt","map","key","Continue","show","onContinue","Footer","id","href","AuthorQuiz","turnData","to","AuthorForm","props","state","name","bookTemp","onFieldChange","bind","handleSubmit","handleAddBook","event","preventDefault","this","onAddAuthor","setState","target","value","concat","onSubmit","htmlFor","type","onChange","book","React","Component","AddAuthorForm","match","Boolean","window","location","hostname","authors","imageSource","imageAttribution","getTurnData","allBooks","reduce","p","c","i","fourRandomBooks","shuffle","slice","answer","sample","find","some","resetState","isCorrect","render","App","AuthorWrapper","withRouter","history","push","ReactDOM","StrictMode","Fragment","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3691add7.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport './bootstrap.min.css';\n\nfunction Hero() {\n    return (\n        <div className=\"row\">\n            <div className=\"jumbotron col-10 offset-1\">\n                <h1>Author Quiz</h1>\n                <p>Select the book written by the author shown</p>\n            </div>\n        </div>\n    );\n}\n\nfunction Book({ title, onClick }) {\n    return (\n        <div\n            className=\"answer\"\n            onClick={() => {\n                onClick(title);\n            }}\n        >\n            <h4>{title}</h4>\n        </div>\n    );\n}\n\nfunction Turn({ author, books, highlight, onAnswerSelected }) {\n    function highlightToBgColor(highlight) {\n        const mapping = {\n            none: '',\n            correct: 'green',\n            wrong: 'red',\n        };\n        return mapping[highlight];\n    }\n\n    return (\n        <div className=\"row turn\" style={{ backgroundColor: highlightToBgColor(highlight) }}>\n            <div className=\"col-4 offset-1\">\n                <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\" />\n            </div>\n            <div className=\"col-6\">\n                {books.map((title) => (\n                    <Book title={title} key={title} onClick={onAnswerSelected} />\n                ))}\n            </div>\n        </div>\n    );\n}\nTurn.propTypes = {\n    author: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        imageUrl: PropTypes.string.isRequired,\n        imageSource: PropTypes.string.isRequired,\n        books: PropTypes.arrayOf(PropTypes.string).isRequired,\n    }),\n    books: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onAnswerSelected: PropTypes.func.isRequired,\n    highlight: PropTypes.string.isRequired,\n};\n\nfunction Continue({ show, onContinue }) {\n    return (\n        <div>\n            {show ? (\n                <div className=\"col-11 continue\">\n                    <button className=\"btn btn-primary btn-lg float-right\">Continue</button>\n                </div>\n            ) : null}\n        </div>\n    );\n}\n\nfunction Footer() {\n    return (\n        <div className=\"row\" id=\"footer\">\n            <div className=\"col-12\">\n                <p className=\"text-muted credit\">\n                    All images are from <a href=\"https://commons.wikimedia.org/wiki/Main_Page\">Wikimedia Commons</a> and are in the public domain\n                </p>\n            </div>\n        </div>\n    );\n}\n\nfunction AuthorQuiz({ turnData, highlight, onAnswerSelected, onContinue }) {\n    return (\n        <div className=\"container-fluid\">\n            <Hero />\n            <Turn {...turnData} highlight={highlight} onAnswerSelected={onAnswerSelected} />\n            <Continue show={highlight === 'correct'} onContinue={onContinue} />\n            <p>\n                <Link to=\"/add\">Add an author</Link>\n            </p>\n            <Footer />\n        </div>\n    );\n}\n\nexport default AuthorQuiz;\n","import React from 'react';\r\nimport './AddAuthorForm.css';\r\n\r\nclass AuthorForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageUrl: '',\r\n            books: [],\r\n            bookTemp: '',\r\n        };\r\n        this.onFieldChange = this.onFieldChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleAddBook = this.handleAddBook.bind(this);\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onAddAuthor(this.state);\r\n    }\r\n    onFieldChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    }\r\n    handleAddBook(event) {\r\n        this.setState({\r\n            books: this.state.books.concat([this.state.bookTemp]),\r\n            bookTemp: '',\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.onFieldChange} />\r\n                </div>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    <label htmlFor=\"imageUrl\">Image URL</label>\r\n                    <input type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} onChange={this.onFieldChange} />\r\n                </div>\r\n                <div className=\"AddAuthorForm__input\">\r\n                    <label htmlFor=\"bookTemp\">Books</label>\r\n                    {this.state.books.map((book) => (\r\n                        <p key={book}>{book}</p>\r\n                    ))}\r\n                    <input type=\"text\" name=\"bookTemp\" value={this.state.bookTemp} onChange={this.onFieldChange} />\r\n                    <input type=\"button\" value=\"+\" onClick={this.handleAddBook} />\r\n                </div>\r\n                <input type=\"submit\" value=\"Add\" />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction AddAuthorForm({ match, onAddAuthor }) {\r\n    return (\r\n        <div className=\"AddAuthorForm\">\r\n            <h1>Add Author</h1>\r\n            <AuthorForm onAddAuthor={onAddAuthor} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddAuthorForm;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\nimport './index.css';\nimport AuthorQuiz from './AuthorQuiz';\nimport AddAuthorForm from './AddAuthorForm';\nimport * as serviceWorker from './serviceWorker';\nimport { shuffle, sample } from 'underscore';\n\nconst authors = [\n    {\n        name: 'Mark Twain',\n        imageUrl: 'images/authors/marktwain.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['The Adventures of Huckleberry Finn'],\n    },\n    {\n        name: 'Joseph Conrad',\n        imageUrl: 'images/authors/josephconrad.png',\n        imageSource: 'Wikimedia Commons',\n        books: ['Heart of Darkness'],\n    },\n    {\n        name: 'J.K. Rowling',\n        imageUrl: 'images/authors/jkrowling.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Daniel Ogren',\n        books: ['Harry Potter and the Sorcerers Stone'],\n    },\n    {\n        name: 'Stephen King',\n        imageUrl: 'images/authors/stephenking.jpg',\n        imageSource: 'Wikimedia Commons',\n        imageAttribution: 'Pinguino',\n        books: ['The Shining', 'IT'],\n    },\n    {\n        name: 'Charles Dickens',\n        imageUrl: 'images/authors/charlesdickens.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['David Copperfield', 'A Tale of Two Cities'],\n    },\n    {\n        name: 'William Shakespeare',\n        imageUrl: 'images/authors/williamshakespeare.jpg',\n        imageSource: 'Wikimedia Commons',\n        books: ['Hamlet', 'Macbeth', 'Romeo and Juliet'],\n    },\n];\n\nfunction getTurnData(authors) {\n    const allBooks = authors.reduce(function (p, c, i) {\n        return p.concat(c.books);\n    }, []);\n    const fourRandomBooks = shuffle(allBooks).slice(0, 4);\n    const answer = sample(fourRandomBooks);\n\n    return {\n        books: fourRandomBooks,\n        author: authors.find((author) => author.books.some((title) => title === answer)),\n    };\n}\n\nfunction resetState() {\n    return {\n        turnData: getTurnData(authors),\n        highlight: '',\n    };\n}\n\nlet state = resetState();\n\nfunction onAnswerSelected(answer) {\n    const isCorrect = state.turnData.author.books.some((book) => book === answer);\n    state.highlight = isCorrect ? 'correct' : 'wrong';\n    render();\n}\n\nfunction App() {\n    return (\n        <AuthorQuiz\n            {...state}\n            onAnswerSelected={onAnswerSelected}\n            onContinue={() => {\n                state = resetState();\n                render();\n            }}\n        />\n    );\n}\n\nconst AuthorWrapper = withRouter(({ history }) => (\n    <AddAuthorForm\n        onAddAuthor={(author) => {\n            authors.push(author);\n            history.push('/');\n        }}\n    />\n));\n\nfunction render() {\n    ReactDOM.render(\n        <React.StrictMode>\n            <BrowserRouter>\n                <React.Fragment>\n                    <Route exact path=\"/\" component={App} />\n                    <Route path=\"/add\" component={AuthorWrapper} />\n                </React.Fragment>\n            </BrowserRouter>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}